{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hooks.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SinglePage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacterByName","name","getCharacter","id","getAllComics","_transformComics","getComic","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","price","prices","AppBanner","className","avengers","avengersLogo","SinglePage","Component","dataType","useParams","setData","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","content"],"mappings":"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","file":"static/js/7.4847a379.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"230px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"Error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from \"../hooks/http.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\",\r\n    _apiKey = \"apikey=aa2c874a5391b732985da0ed1ea67672\",\r\n    _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  // Вариант модификации готового метода для поиска по имени.\r\n  // Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n  // const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n  //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n  //     return res.data.results.map(_transformCharacter);\r\n  // }\r\n\r\n  // Или можно создать отдельный метод для поиска по имени\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return { loading, request, error, clearError };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import \"./appBanner.scss\";\nimport avengers from \"../../resources/img/Avengers.png\";\nimport avengersLogo from \"../../resources/img/Avengers_logo.png\";\n\nconst AppBanner = () => {\n  return (\n    <div className=\"app__banner\">\n      <img src={avengers} alt=\"Avengers\" />\n      <div className=\"app__banner-text\">\n        New comics every week!\n        <br />\n        Stay tuned!\n      </div>\n      <img src={avengersLogo} alt=\"Avengers logo\" />\n    </div>\n  );\n};\n\nexport default AppBanner;\n","import { useParams } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\n// Хотелось бы вынести функцию по загрузке данных как отдельный аргумент\r\n// Но тогда мы потеряем связь со стэйтами загрузки и ошибки\r\n// А если вынесем их все в App.js - то они будут одни на все страницы\r\n\r\nconst SinglePage = ({ Component, dataType }) => {\r\n  const { id } = useParams();\r\n  const [data, setData] = useState(null);\r\n  const { loading, error, getComic, getCharacter, clearError } =\r\n    useMarvelService();\r\n\r\n  useEffect(() => {\r\n    updateData();\r\n  }, [id]);\r\n\r\n  const updateData = () => {\r\n    clearError();\r\n\r\n    switch (dataType) {\r\n      case \"comic\":\r\n        getComic(id).then(onDataLoaded);\r\n        break;\r\n      case \"character\":\r\n        getCharacter(id).then(onDataLoaded);\r\n    }\r\n  };\r\n\r\n  const onDataLoaded = (data) => {\r\n    setData(data);\r\n  };\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const spinner = loading ? <Spinner /> : null;\r\n  const content = !(loading || error || !data) ? (\r\n    <Component data={data} />\r\n  ) : null;\r\n\r\n  return (\r\n    <>\r\n      <AppBanner />\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SinglePage;\r\n"],"sourceRoot":""}